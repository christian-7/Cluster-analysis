%%  DBSCAN and basic analysis from HTP data (ThunderSTORM output)

%%%%%%%%%%INPUT%%%%%%%%%%

% Thunderstorm type input file from Fangs software

%%%%%%%%%%OUTPUT%%%%%%%%%%

%   newCon with 7 columns

% 1 number of cluster
% 2 area from convex hull
% 3 area from delaunay triangle
% 4 density as mol/area
% 5 mean diameter
% 6 stdev diameter
% 7 Mean Mol


% OUTPUT NAME: DBSCAN_delaunay_HK_"filename_peaks"

% clear, close all, clc, clear

function [newCon,inCluster,MeanMol,ClusterDensity,MeanClusDis,LocsPerArea,TotalLocs]=DBSCAN_analysis_HTP(filename_peaks,figures) 
%%  %%%%%%%%%%INPUT%%%%%%%%%%

% filename_peaks%='locResults';                        % filename of TS output file
filename_peaks2=[filename_peaks '.dat'];
peaks=dlmread(filename_peaks2,',',1,0);

fprintf('\n -- Data loaded --\n')
%% Select Parameters and find columns in dataset

% Find correct columns form header line

file = fopen(filename_peaks2);
line = fgetl(file);
h = regexp( line, ',', 'split' );

x = strmatch('x [nm]',h);
y = strmatch('y [nm]',h);
LL = strmatch('loglikelihood',h);
frame = strmatch('frame',h);

% x = 1;
% y = 2;
% LL = 8;
% frame = 4;

% Set DBSCAN and filtering parameters

thresh=500;                                             % loglikelihood threshold
k=10;                                                   % minimum number of neighbors within Eps
Eps=20;                                                 % minimum distance between points, nm
minLoc=142;                                             % minimum number of locs per cluster



fprintf('\n -- Parameters selected --\n')
%% Filter for loglikelihood and Plot data

filter=find(peaks(:,LL)<thresh);
subsetLL=peaks(filter,1:end);

if figures==1;
figure
scatter(subsetLL(:,x),subsetLL(:,y),1)
else
end

% Create variable for DBSCAN (only X and Y coordinates)

dataDBS(:,1)=subsetLL(:,x); % x
dataDBS(:,2)=subsetLL(:,y); % y

fprintf('\n -- Data filtered --\n')

%% %% Cluster DBSCAN

% input image --> all
tic
[class,type]=DBSCAN(dataDBS,k,Eps);     % uses parameters specified at input
class2=transpose(class);                % class - vector specifying assignment of the i-th object to certain cluster (m,1)
type2=transpose(type);              % (core: 1, border: 0, outlier: -1)

fprintf(' -- DBSCAN computed in %f sec -- \n',toc)

%% Find core points --> type = 1 or 0 and define them as subset

coreBorder=find(type2 >= 0);

subset=[];

subset(:,1)=dataDBS(coreBorder,1);          % x position
subset(:,2)=dataDBS(coreBorder,2);          % y position
subset(:,3)=class2(coreBorder);             % cluster ID
subset(:,4)=subsetLL(coreBorder,frame);     % frame

if figures==1;

figure('Position',[100 600 1200 400])
subplot(1,3,1)
scatter(subsetLL(:,x),subsetLL(:,y),1);
title('Raw Data')
axis on
axis([0 max(subsetLL(:,x)) 0 max(subsetLL(:,y))])

subplot(1,3,2)
scatter(subset(:,1),subset(:,2),1,mod(subset(:,3),10))
title('identified Clusters')
axis on
axis([0 max(subsetLL(:,x)) 0 max(subsetLL(:,y))])  


subplot(1,3,3)
scatter(subset(:,1),subset(:,2),1,(subset(:,4)));
title('identified Clusters (color -> frame)')
colorbar
axis on
axis([0 max(subsetLL(:,x)) 0 max(subsetLL(:,y))])  


else 
end

%% Save clusters from DBSCAN identification

filenamec1=['DBSCAN_clusters_' filename_peaks];

save(filenamec1,'subset');

fprintf('\n -- All clusters saved --\n')

%% Filter and save clusters from DBSCAN identification 

subset_filt=[];
subset_filt2=[];

for index=1:max(subset(:,3));
    
    cluster=find(subset(:,3)==index);
    subset(cluster,5)=length(cluster);
    
    if length(cluster)>minLoc; 
        
    subset_filt(cluster,1)=subset(cluster,1);          % x position
    subset_filt(cluster,2)=subset(cluster,2);          % y position
    subset_filt(cluster,3)=subset(cluster,3);          % cluster ID
    subset_filt(cluster,4)=subset(cluster,4);          % frame   
    
    else end
        
end        

% Clean zeros from subset_filt

    subset_filt2(:,1)=nonzeros(subset_filt(:,1));
    subset_filt2(:,2)=nonzeros(subset_filt(:,2));
    subset_filt2(:,3)=nonzeros(subset_filt(:,3));
    subset_filt2(:,4)=nonzeros(subset_filt(:,4));
    
    subset_filt=subset_filt2;

%%%%%%%    
inCluster = length(subset_filt)/length(dataDBS) % percent of molecules in filtered clusters    
%%%%%%%    

% Save subset_filt

filenamec1=['DBSCAN_clusters_filtered_' filename_peaks];

save(filenamec1,'subset_filt');

fprintf('\n -- Filtered Clusters saved --\n')


%% Calculate Area (delaunay and convhull), density and diameter for all clusters 


numbr=subset(:,3);
maxk=max(numbr);
index=1;
newCon=[];
newCon_notfilt=[];

for numbr=2:maxk;
    
    vi=find(subset(:,3)==numbr);
    
    x=subset(vi,1);
    y=subset(vi,2);
    
    clusterxCenter=sum(x)/length(x);
    clusteryCenter=sum(y)/length(y);
    
    [conh,Aconh]=convhull(x,y);
    Tri=delaunay(x,y);
    areaTri =polyarea(x(Tri'),y(Tri'));
    
    
    outerPoints(:,1)=x(conh);
    outerPoints(:,2)=y(conh);

    Dx=pdist(outerPoints); 
    Dx=transpose(Dx);
    
    if length(vi)>minLoc;                           % select clusters smaller than minLocs
    
    newCon_notfilt(index,1)=numbr;                  % number of cluster
    newCon_notfilt(index,2)=Aconh;                  % area from convex hull
    newCon_notfilt(index,3)=sum(areaTri);           % area from delaunay triangle
    newCon_notfilt(index,4)=length(vi)/Aconh;       % density as mol/area
    newCon_notfilt(index,5)=mean(Dx);               % mean diameter
    newCon_notfilt(index,6)=std(Dx);                % stdev of diamter
    newCon_notfilt(index,7)=length(vi);             % number of localizations
    
    Centers_notfilt(index,1)= clusterxCenter;
    Centers_notfilt(index,2)= clusteryCenter;
    
    else                                    % all other clusters will be further processed
    
    newCon(index,1)=numbr;                  % number of cluster
    newCon(index,2)=Aconh;                  % area from convex hull
    newCon(index,3)=sum(areaTri);           % area from delaunay triangle
    newCon(index,4)=length(vi)/Aconh;       % density as mol/area
    newCon(index,5)=mean(Dx);               % mean diameter
    newCon(index,6)=std(Dx);                % stdev of diamter
    newCon(index,7)=length(vi);             % number of localizations
    
    Centers(index,1)= clusterxCenter;
    Centers(index,2)= clusteryCenter;
    
    end
    
    clear outerPoints;
    
    index=index+1;

end 

[KCell,AreaCell]=convhull(Centers(:,1),Centers(:,2)); % Determine Area of the whole cell patch 

%% Clean newCon and newCon_notfilt

if isempty(newCon_notfilt)
else    
    newCon_notfilt2(:,1)=nonzeros(newCon_notfilt(:,1));
    newCon_notfilt2(:,2)=nonzeros(newCon_notfilt(:,2));
    newCon_notfilt2(:,3)=nonzeros(newCon_notfilt(:,3));
    newCon_notfilt2(:,4)=nonzeros(newCon_notfilt(:,4));
    newCon_notfilt2(:,5)=nonzeros(newCon_notfilt(:,5));
    newCon_notfilt2(:,6)=nonzeros(newCon_notfilt(:,6));
    newCon_notfilt2(:,7)=nonzeros(newCon_notfilt(:,7));
    
    newCon_notfilt=newCon_notfilt2;

    newCon2(:,1)=nonzeros(newCon(:,1));
    newCon2(:,2)=nonzeros(newCon(:,2));
    newCon2(:,3)=nonzeros(newCon(:,3));
    newCon2(:,4)=nonzeros(newCon(:,4));
    newCon2(:,5)=nonzeros(newCon(:,5));
    newCon2(:,6)=nonzeros(newCon(:,6));
    newCon2(:,7)=nonzeros(newCon(:,7));
    
    newCon=newCon2;

    clear newCon_notfilt2 newCon2
end
%% For Blinking analysis

binCenters = 0:10:200;
[N,X] = hist(newCon(:,7),binCenters);

if figures==1;

figure

N = N./length(newCon(:,7));
bar(X(2:end-1),N(2:end-1));
title('Number of Localizations per cluster')
else
end

MeanMol=mean(newCon(:,7))


%% Plot results from newCon

if figures==1;

figure('Position',[900 50 900 600])

subplot(2,3,1)
hist(newCon(:,2),30)
title('Area from Conv Hull')

subplot(2,3,2)
hist(newCon(:,3),30)
title('Area from Delaunay')

subplot(2,3,3)
hist(newCon(:,4),30)
title('density (local/area)')

subplot(2,3,4)
hist(newCon(:,5),30)
title('Mean Diameter')

subplot(2,3,5)
hist(newCon(:,6),30)
title('Stdev Diameter')

subplot(2,3,6)
plot(Centers(KCell,1),Centers(KCell,2),'r-',Centers(:,1),Centers(:,2),'b+')
title('Cluster Centers and ConvHull')

else
end

%% Calculate population parameters 

% Mean distance between clusters
% Cluster density
% Locs per Cell
% Total Locs


% Calculate distance distribution of cluster centers and fit to normal distribution

tic

D=pdist(Centers,'euclidean');

[f,xi] = ksdensity(D);

if figures==1;

figure('Position',[900 50 900 200])
subplot(1,3,1)
hist(D,50);hold on;
title('pdist of centers in pxl')
subplot(1,3,2)
plot(xi,f);
title('pdf of dist centers in pxl')
subplot(1,3,3)
scatter(Centers(:,1),Centers(:,2),3)
title('Cluster Centers')

else 
end    

toc

MeanClusDis=fitdist(D(:),'normal')          % Mean Distance between clusters

ClusterDensity=length(Centers)/AreaCell     % Clusters per µm^2

LocsPerArea=length(subsetLL)/AreaCell       % Localizations per Area Cell

TotalLocs=length(subsetLL)                  % Total Locs 


%% Export newCon

% 1 number of cluster
% 2 area from convex hull
% 3 area from delaunay triangle
% 4 density as mol/area
% 5 mean diameter
% 6 stdev diameter
% 7 mean number of molecules

filename = ['DBSCAN_delaunay_filtered' filename_peaks '.txt'];
dlmwrite(filename, newCon)

end